name: "SLURM"   # MUST BE "SLURM"

# Required
partition: "single"
job-name: "panda_VIGOR"    # this will be the experiment name in slurm
num_parallel_jobs: 99
time: 2800  # in minutes
cpus-per-task: 32
ntasks: 1
mem: 25000
sbatch_args: # Dictionary of SBATCH keywords and arguments
  distribution: cyclic  # To have repetitions of the same exp be distributed to different nodes

slurm_log: "./experiments/slurmlog" # optional. dir in which slurm output and error logs will be saved.
---
name: "DEFAULT"   # MUST BE DEFAULT
import_path: "default.yaml"

repetitions: 1
reps_per_job: 1
reps_in_parallel: 1
params:

  algorithm: VIGOR
  iterations: 31
  steps_per_iteration: 10
  recording:
    make_videos: False
    draw_expensive_plots: True
    wandb_logging: True
    checkpoint_save_frequency: 1
    pseudo_contextual:
      record_train_policies: True
      record_validation_policies: True
      record_test_policies: False
      plotted_train_contexts: 6
      plotted_validation_contexts: 6
      plotted_test_contexts: 0
  meta_task:
    sample_size: 5
    num_test_contexts: 0
    seed: default
    pytorch_seed: paired
    shuffle_demonstrations: True
    num_train_contexts: 6
    num_validation_contexts: 6
    num_evaluation_samples: 100

  task:
    data_source: promp_fits
    task: panda_reacher

  policy:
    component_time_to_live: 5000
    num_components: 5
    weight_update_type: null
    kl_bound: 0.2
    samples_per_component: 1536  # 6*8=48dimensions, so we need > 48*49/2 = 1176 samples for the quadratic surrogate

  network:
    num_dres: 5
    dre_aggregation: "mean"
    uniform_policy_dre_samples: True
    batch_size: 64
    validation_split: 0.1
    verbose: 0
    early_stopping:
      patience: 10
      restore_best: true
      warmup: 10
    epochs: 50
    feedforward:
      max_neurons_per_layer: "tied"

    learning_rate: 3.0e-4

    regularization:
      batch_norm: false
      dropout: 0.2
      l2_norm: 0
      spectral_norm: false
      activation_function: leakyrelu
    time_series:
      architecture: 1d_cnn
      1d_cnn:
        kernel_size: 7
        num_layers: 4
        num_channels: 64
        padding: zero
        stepwise_aggregation_method: sum

      stepwise_loss: True

  modality: geometric


---
name: panda_reacher_vigor
params:
  algorithm: VIGOR

  iterations: 301
  steps_per_iteration: 1
  recording:
    checkpoint_save_frequency: 1
  meta_task:
    sample_size: 5
    num_train_contexts: 6
  network:
    time_series:
      1d_cnn:
        num_layers: 3
